services:
  database:
    image: postgres:alpine
    container_name: postgres
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    volumes:
      - postgres-data:/var/lib/postgresql/data/
      - ./init_sql_scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - assessment3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: zimmermantr/movie-app-nodejs-backend:latest
    container_name: backend
    ports:
      - '${BACK_PORT:-3001}:3001'
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
    networks:
      - assessment3
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:${BACK_PORT:-3001}/health || exit 1"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: zimmermantr/movie-app-nodejs-frontend:latest
    container_name: frontend
    ports:
      - '${FRONT_PORT:-3000}:3000'
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - assessment3

networks:
  assessment3:
    name: assessment3
    driver: bridge

volumes:
  postgres-data: {}